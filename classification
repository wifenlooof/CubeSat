import os
import shutil
import time

import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image, UnidentifiedImageError

from picamera2 import Picamera2

# --- Step 1: Capture an image using Picamera2 --- #
def capture_image(image_path="image.png", resolution=(350, 350)):
    """
    Configures the Picamera2 for a still capture at the given resolution,
    captures an image, saves it to image_path, and returns the file path.
    """
    picam2 = Picamera2()
    # Create a still configuration with the desired resolution.
    config = picam2.create_still_configuration(main={"size": resolution})
    picam2.configure(config)
    picam2.start()
    # Allow the camera to adjust (exposure, white balance, etc.)
    time.sleep(2)
    # Capture the image as a numpy array
    image_array = picam2.capture_array()
    # Convert the numpy array to a PIL image and save it.
    pil_image = Image.fromarray(image_array)
    pil_image.save(image_path)
    picam2.stop()
    return image_path

# --- Step 2: Load the pretrained PyTorch model --- #
def load_model(device):
    """
    Loads the resnet18 model with a modified final layer for binary classification,
    loads the pretrained weights from 'wildfire_model.pth', and returns the model.
    """
    # Load the model architecture (using torch.hub to get resnet18)
    model = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=False)
    # Modify the final fully connected layer for a single output
    model.fc = nn.Linear(model.fc.in_features, 1)
    # Load your trained weights. If you trained on GPU but are running on CPU,
    # use map_location to remap storage.
    model.load_state_dict(torch.load('wildfire_model.pth', map_location=device))
    model = model.to(device)
    model.eval()
    return model

# --- Step 3: Classify the captured image --- #
def classify_image(model, device, img_path, threshold=0.75):
    """
    Loads and preprocesses the image at img_path, passes it through the model,
    and returns the model's confidence (after applying the sigmoid).
    """
    # Define the image transformations (must match training)
    transform = transforms.Compose([
        transforms.Resize((256, 256)),  # Resize the image (as used during training)
        transforms.ToTensor(),  # Convert image to tensor
        transforms.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])
    ])
    
    try:
        img = Image.open(img_path).convert("RGB")
        img = transform(img).unsqueeze(0).to(device)  # Add batch dimension
    except FileNotFoundError:
        print(f"Error: File {img_path} not found.")
        return None
    except UnidentifiedImageError:
        print(f"Error: File {img_path} is not a valid image.")
        return None

    with torch.no_grad():
        output = model(img)
        # Use the sigmoid function to map logits to a (0,1) confidence value
        confidence = torch.sigmoid(output).item()
    return confidence

# --- Step 4: Main program logic --- #
def main():
    # Set the confidence threshold (75% or 0.75)
    confidence_threshold = 0.75

    # Capture the image
    image_path = capture_image()
    print(f"Captured image saved to: {image_path}")

    # Set up the device and load the model
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = load_model(device)

    # Classify the image and obtain the confidence score
    confidence = classify_image(model, device, image_path, threshold=confidence_threshold)
    if confidence is None:
        print("Image classification failed.")
        return

    print(f"Model confidence: {confidence:.2f}")

    # Based on the confidence, either save the image in the "wildfire" folder or delete it.
    if confidence >= confidence_threshold:
        print(f"Prediction: Wildfire (Confidence: {confidence:.2f})")
        # Ensure the folder exists
        folder = "wildfire"
        if not os.path.exists(folder):
            os.makedirs(folder)
        # Move the image into the folder
        new_path = os.path.join(folder, os.path.basename(image_path))
        shutil.move(image_path, new_path)
        print(f"Image moved to {new_path}")
    else:
        print(f"Prediction: No Wildfire (Confidence: {confidence:.2f})")
        # Delete the image file
        os.remove(image_path)
        print("Image deleted.")

if __name__ == '__main__':
    main()
